# Autogenerated config.py
# --- Recommended for both Pyright and Pylint ---
# type: ignore[reportUndefinedVariable] # For Pyright
# pylint: disable=E0602 # For Pylint
"""
config file for qutebrowser
"""

#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only.
#     This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only,
#     unless a cookie is already set for the domain.
#     On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set("content.cookies.accept", "all", "chrome-devtools://*")

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only.
#     This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only,
#     unless a cookie is already set for the domain.
#     On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set("content.cookies.accept", "all", "devtools://*")

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set("content.headers.accept_language", "", "https://matchmaker.krunker.io/*")

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{upstream_browser_version_short}`: The
# corresponding Safari/Chrome   version, but only with its major
# version. * `{qutebrowser_version}`: The currently running qutebrowser
# version.  The default value is equal to the default user agent of
# QtWebKit/QtWebEngine, but with the `QtWebEngine/...` part removed for
# increased compatibility.  Note that the value read from JavaScript is
# always the global value.
# Type: FormatString
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}; rv:136.0) Gecko/20100101 Firefox/139.0",
    "https://accounts.google.com/*",
)

# Load images automatically in web pages.
# Type: Bool
config.set("content.images", True, "chrome-devtools://*")

# Load images automatically in web pages.
# Type: Bool
config.set("content.images", True, "devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "chrome-devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "chrome://*/*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "qute://*/*")

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set(
    "content.local_content_can_access_remote_urls",
    True,
    "file:///home/haku/.local/share/qutebrowser/userscripts/*",
)

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set(
    "content.local_content_can_access_file_urls",
    False,
    "file:///home/haku/.local/share/qutebrowser/userscripts/*",
)

# Haku <<<

c.content.javascript.log_message.excludes = {
    "userscript:_qute_stylesheet": [
        "*Refused to apply inline style because it violates the following \
        Content Security Policy directive: *"
    ],
    "userscript:_qute_js": ["*TrustedHTML*"],
}
c.fonts.default_size = "20pt"
c.scrolling.smooth = True
c.search.incremental = False
# config.bind("<Ctrl-h>", "fake-key <Backspace>")
config.bind("<Ctrl-h>", "fake-key <backspace>", mode="insert")
config.bind("K", "tab-next")
config.bind("J", "tab-prev")
# Emacs-like keybindings
# Note: qutebrowser uses <ctrl-p> for history-prev by default.
#       You might need to unbind existing keys first if you want to reuse them.
#       e.g., config.unbind('<ctrl-p>', mode='normal')


# <alt-a>: Select All
# Simulates pressing Ctrl+A (common for select all in many apps)
# Note: In some systems or apps, this might be Ctrl+Shift+End or Home+Shift+End.
# normal keys

config.bind(
    "z",
    "config-cycle tabs.show always never;; config-cycle statusbar.show always never",
)
config.bind("d", "cmd-run-with-count 20 scroll down")
config.bind("u", "cmd-run-with-count 20 scroll up")
# config.bind("d", "scroll-page 0 0.5")
# config.bind("u", "scroll-page 0 -0.5")
config.bind("x", "tab-close")
config.bind("X", "tab-only -p")
config.bind("w", "mode-enter passthrough", mode="normal")

# meta keys : command / windows
# config.bind("<Meta-tab>", "tab-select 1/1")
config.bind("<Meta-1>", "tab-select 0/1")
config.bind("<Meta-2>", "tab-select 1/1")
config.bind("<Meta-shift-1>", "tab-give 0")
config.bind("<Meta-shift-2>", "tab-give 1")
config.bind("<shift-u>", "undo")

# alt keys
config.bind("<alt-0>", "tab-move")
config.bind("<alt-shift-j>", "tab-move -")
config.bind("<alt-shift-k>", "tab-move +")
config.bind("<alt-a>", "fake-key <ctrl-a>", mode="insert")
config.bind("<alt-h>", "fake-key <ctrl-backspace>", mode="insert")
config.bind("<alt-b>", "fake-key <ctrl-left>", mode="insert")
config.bind("<alt-f>", "fake-key <ctrl-right>", mode="insert")
config.bind("<alt-d>", "fake-key <ctrl-delete>", mode="insert")
config.bind("<alt-p>", "tab-pin")
config.bind("<alt-s>", "config-source")
config.bind("<alt-e>", "tab-focus last")
config.bind("<alt-j>", "click-element position 1000,300")
config.bind(
    "<alt-d>", 'yank selection;; spawn --detach bash -c "open dict://$(pbpaste)"'
)
config.bind("<ctrl-f>", "fake-key <right>", mode="insert")
config.bind("<ctrl-n>", "fake-key <down>", mode="insert")
config.bind("<ctrl-p>", "fake-key <up>", mode="insert")
config.bind("<ctrl-j>", "completion-item-focus next", mode="command")
config.bind("<ctrl-k>", "completion-item-focus prev", mode="command")
# config.bind("<ctrl-t>", "toggle")
config.bind("<ctrl-t>", "cmd-set-text -s :tab-take")

# --- Existing bindings you might want to keep or review ---
# (from our previous conversation)

# Go to beginning/end of line (C-a, C-e)
config.bind("<ctrl-a>", "fake-key <home>", mode="insert")
config.bind("<ctrl-e>", "fake-key <end>", mode="insert")

# Kill line from cursor (C-k)
config.bind("<ctrl-k>", "fake-key <shift-end><delete>", mode="insert")

# Delete char (C-d)
config.bind("<ctrl-d>", "fake-key <delete>", mode="insert")

# Paste (C-y)
config.bind("<ctrl-y>", "paste", mode="insert")


config.bind("<ctrl-k>", "mode-enter set_mark")
# config.bind("<ctrl-l>", "cmd-set-text -s :jump-mark ")
config.bind("<alt-b>", "cmd-set-text -s :bookmark-load")
config.bind("<alt-shift-b>", "cmd-set-text -s :bookmark-load -t")


# Haku >>>
